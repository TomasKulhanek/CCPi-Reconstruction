#include "include/numpy_boost.hpp"
#include "include/numpy_boost_python.hpp"
#include "base_types.hpp"

extern numpy_boost<float, 3> conebeam_reconstruct_cgls(const numpy_boost<float, 3> &pixels,
				       const numpy_boost<float, 1> &angles,
					   const numpy_boost<float, 1> &h_offsets,
					   const numpy_boost<float, 1> &v_offsets,
					   const int pixels_per_voxel,
					   const double source_x,
					   const double detector_x,
					   const double pixel_h_size,
					   const double pixel_v_size,
					   const double mask_radius,
					   const bool beam_harden,
					   const numpy_boost<float, 1> &full_vox_origin,
					   const numpy_boost<float, 1> &voxel_size,
				       int niterations, 
					   int nthreads,
					   bool is_pixels_in_log);
					   
extern numpy_boost<float, 3> conebeam_reconstruct_sirt(const numpy_boost<float, 3> &pixels,
				       const numpy_boost<float, 1> &angles,
					   const numpy_boost<float, 1> &h_offsets,
					   const numpy_boost<float, 1> &v_offsets,
					   const int pixels_per_voxel,
					   const double source_x,
					   const double detector_x, 
					   const double pixel_h_size,
					   const double pixel_v_size, 
					   const double mask_radius,
					   const bool beam_harden, 
					   const numpy_boost<float, 1> &full_vox_origin,
					   const numpy_boost<float, 1> &voxel_size,
				       int niterations, int nthreads,
					   bool is_pixels_in_log);
					   
extern numpy_boost<float, 3> conebeam_reconstruct_mlem(const numpy_boost<float, 3> &pixels,
				       const numpy_boost<float, 1> &angles,
					   const numpy_boost<float, 1> &h_offsets,
					   const numpy_boost<float, 1> &v_offsets,
					   const int pixels_per_voxel, const double source_x,
					   const double detector_x, const double pixel_h_size,
					   const double pixel_v_size, const double mask_radius,
					   const bool beam_harden, 
					   const numpy_boost<float, 1> &full_vox_origin,
					   const numpy_boost<float, 1> &voxel_size,
				       int niterations, int nthreads,
					   bool is_pixels_in_log);
					   
extern numpy_boost<float, 3>
conebeam_reconstruct_cgls_tikhonov(const numpy_boost<float, 3> &pixels,
				       const numpy_boost<float, 1> &angles,
					   const numpy_boost<float, 1> &h_offsets,
					   const numpy_boost<float, 1> &v_offsets,
					   const int pixels_per_voxel, 
					   const double source_x,
					   const double detector_x, 
					   const double pixel_h_size,
					   const double pixel_v_size, 
					   const double mask_radius,
					   const bool beam_harden, 
					   const numpy_boost<float, 1> &full_vox_origin,
					   const numpy_boost<float, 1> &voxel_size,
				       int niterations, 
					   int nthreads,
					   double regularize,
					   numpy_boost<float, 1> norm_r, 
					   bool is_pixels_in_log);
					   
extern numpy_boost<float, 3>
conebeam_reconstruct_cgls_tvreg(const numpy_boost<float, 3> &pixels,
				       const numpy_boost<float, 1> &angles,
					   const numpy_boost<float, 1> &h_offsets,
					   const numpy_boost<float, 1> &v_offsets,
					   const int pixels_per_voxel, 
					   const double source_x,
					   const double detector_x, 
					   const double pixel_h_size,
					   const double pixel_v_size, 
					   const double mask_radius,
					   const bool beam_harden, 
					   const numpy_boost<float, 1> &full_vox_origin,
					   const numpy_boost<float, 1> &voxel_size,
				       int niterations, 
					   int nthreads,
					   double regularize,
					   numpy_boost<float, 1> norm_r, 
					   bool is_pixels_in_log);
extern numpy_boost<float, 3> conebeam_reconstruct_cgls2(const numpy_boost<float, 3> &pixels,
				       const numpy_boost<float, 1> &angles,
					   const numpy_boost<float, 1> &h_offsets,
					   const numpy_boost<float, 1> &v_offsets,
					   const int pixels_per_voxel, 
					   const double source_x,
					   const double detector_x, 
					   const double pixel_h_size,
					   const double pixel_v_size, 
					   const double mask_radius,
					   const bool beam_harden, 
					   const numpy_boost<float, 1> &full_vox_origin,
					   const numpy_boost<float, 1> &voxel_size,
				       int niterations, int nthreads,
					   numpy_boost<float, 1> norm_r, 
					   bool is_pixels_in_log);
